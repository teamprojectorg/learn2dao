{"ast":null,"code":"import { Web3Storage } from 'web3.storage';\nimport { CONFIG } from '../config.js';\nfunction getAccessToken() {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return CONFIG.TEMPLATE.web3storage_api_key;\n}\nfunction makeStorageClient() {\n  return new Web3Storage({\n    token: getAccessToken()\n  });\n}\nfunction getFiles() {\n  const fileInput = document.querySelector('input[type=\"file\"]');\n  return fileInput.files;\n}\nfunction makeFileObjects() {\n  // You can create File objects from a Blob of binary data\n  // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n  // Here we're just storing a JSON object, but you can store images,\n  // audio, or whatever you want!\n  const obj = {\n    hello: 'world'\n  };\n  const blob = new Blob([JSON.stringify(obj)], {\n    type: 'application/json'\n  });\n  const files = [new File(['contents-of-file-1'], 'plain-utf8.txt'), new File([blob], 'hello.json')];\n  return files;\n}\nasync function storeFiles(files) {\n  const client = makeStorageClient();\n  const cid = await client.put(files);\n  console.log('stored files with cid:', cid);\n  return cid;\n}\nexport default async function retrieveFiles(cid) {\n  const client = makeStorageClient();\n  const res = await client.get(cid);\n  console.log(`Got a response! [${res.status}] ${res.statusText}`);\n  if (!res.ok) {\n    throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`);\n  }\n\n  // unpack File objects from the response\n  const files = await res.files();\n  for (const file of files) {\n    console.log(`${file.cid} -- ${file.path} -- ${file.size}`);\n    console.log(typeof file);\n    console.log(file);\n    console.log(file.text);\n  }\n}","map":{"version":3,"names":["Web3Storage","CONFIG","getAccessToken","TEMPLATE","web3storage_api_key","makeStorageClient","token","getFiles","fileInput","document","querySelector","files","makeFileObjects","obj","hello","blob","Blob","JSON","stringify","type","File","storeFiles","client","cid","put","console","log","retrieveFiles","res","get","status","statusText","ok","Error","file","path","size","text"],"sources":["/Users/yuchenpeng/dao_terminal_v0/src/utils/retrieveIPFS.js"],"sourcesContent":["import { Web3Storage } from 'web3.storage'\nimport {CONFIG} from '../config.js'\nfunction getAccessToken () {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return CONFIG.TEMPLATE.web3storage_api_key\n}\n\nfunction makeStorageClient () {\n  return new Web3Storage({ token: getAccessToken() })\n}\n\nfunction getFiles () {\n  const fileInput = document.querySelector('input[type=\"file\"]')\n  return fileInput.files\n}\n\nfunction makeFileObjects () {\n  // You can create File objects from a Blob of binary data\n  // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n  // Here we're just storing a JSON object, but you can store images,\n  // audio, or whatever you want!\n  const obj = { hello: 'world' }\n  const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })\n\n  const files = [\n    new File(['contents-of-file-1'], 'plain-utf8.txt'),\n    new File([blob], 'hello.json')\n  ]\n  return files\n}\n\nasync function storeFiles (files) {\n  const client = makeStorageClient()\n  const cid = await client.put(files)\n  console.log('stored files with cid:', cid)\n  return cid\n}\n\n\nexport default async function retrieveFiles (cid) {\nconst client = makeStorageClient()\nconst res = await client.get(cid)\nconsole.log(`Got a response! [${res.status}] ${res.statusText}`)\nif (!res.ok) {\n    throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)\n}\n\n// unpack File objects from the response\nconst files = await res.files()\nfor (const file of files) {\n    console.log(`${file.cid} -- ${file.path} -- ${file.size}`)\n    console.log(typeof file)\n    console.log(file)\n    console.log(file.text)\n\n}\n\n\n\n}\n\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAAQC,MAAM,QAAO,cAAc;AACnC,SAASC,cAAc,GAAI;EACzB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,OAAOD,MAAM,CAACE,QAAQ,CAACC,mBAAmB;AAC5C;AAEA,SAASC,iBAAiB,GAAI;EAC5B,OAAO,IAAIL,WAAW,CAAC;IAAEM,KAAK,EAAEJ,cAAc;EAAG,CAAC,CAAC;AACrD;AAEA,SAASK,QAAQ,GAAI;EACnB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC;EAC9D,OAAOF,SAAS,CAACG,KAAK;AACxB;AAEA,SAASC,eAAe,GAAI;EAC1B;EACA;EACA;EACA;EACA,MAAMC,GAAG,GAAG;IAAEC,KAAK,EAAE;EAAQ,CAAC;EAC9B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACL,GAAG,CAAC,CAAC,EAAE;IAAEM,IAAI,EAAE;EAAmB,CAAC,CAAC;EAE1E,MAAMR,KAAK,GAAG,CACZ,IAAIS,IAAI,CAAC,CAAC,oBAAoB,CAAC,EAAE,gBAAgB,CAAC,EAClD,IAAIA,IAAI,CAAC,CAACL,IAAI,CAAC,EAAE,YAAY,CAAC,CAC/B;EACD,OAAOJ,KAAK;AACd;AAEA,eAAeU,UAAU,CAAEV,KAAK,EAAE;EAChC,MAAMW,MAAM,GAAGjB,iBAAiB,EAAE;EAClC,MAAMkB,GAAG,GAAG,MAAMD,MAAM,CAACE,GAAG,CAACb,KAAK,CAAC;EACnCc,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,GAAG,CAAC;EAC1C,OAAOA,GAAG;AACZ;AAGA,eAAe,eAAeI,aAAa,CAAEJ,GAAG,EAAE;EAClD,MAAMD,MAAM,GAAGjB,iBAAiB,EAAE;EAClC,MAAMuB,GAAG,GAAG,MAAMN,MAAM,CAACO,GAAG,CAACN,GAAG,CAAC;EACjCE,OAAO,CAACC,GAAG,CAAE,oBAAmBE,GAAG,CAACE,MAAO,KAAIF,GAAG,CAACG,UAAW,EAAC,CAAC;EAChE,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE;IACT,MAAM,IAAIC,KAAK,CAAE,iBAAgBV,GAAI,OAAMK,GAAG,CAACE,MAAO,KAAIF,GAAG,CAACG,UAAW,EAAC,CAAC;EAC/E;;EAEA;EACA,MAAMpB,KAAK,GAAG,MAAMiB,GAAG,CAACjB,KAAK,EAAE;EAC/B,KAAK,MAAMuB,IAAI,IAAIvB,KAAK,EAAE;IACtBc,OAAO,CAACC,GAAG,CAAE,GAAEQ,IAAI,CAACX,GAAI,OAAMW,IAAI,CAACC,IAAK,OAAMD,IAAI,CAACE,IAAK,EAAC,CAAC;IAC1DX,OAAO,CAACC,GAAG,CAAC,OAAOQ,IAAI,CAAC;IACxBT,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;IACjBT,OAAO,CAACC,GAAG,CAACQ,IAAI,CAACG,IAAI,CAAC;EAE1B;AAIA"},"metadata":{},"sourceType":"module"}