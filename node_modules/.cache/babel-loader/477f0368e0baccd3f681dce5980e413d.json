{"ast":null,"code":"import { Web3Storage } from 'web3.storage';\nimport { CONFIG } from '../config.js';\nimport { sha256, sha224 } from 'js-sha256';\nfunction getAccessToken() {\n  return CONFIG.TEMPLATE.web3storage_api_key;\n}\nfunction makeStorageClient() {\n  return new Web3Storage({\n    token: getAccessToken()\n  });\n}\nexport default async function retrieveFiles(cid) {\n  const client = makeStorageClient();\n  let id = \"bafybeiei3sdsoeyqtdxpy5jnmk77yrlbtwvbxatpk23iopz5iegybbzvbi\";\n  const res = await client.get(id);\n  console.log(`Got a response! [${res.status}] ${res.statusText}`);\n  if (!res.ok) {\n    throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`);\n  }\n\n  // unpack File objects from the response\n  const files = await res.files();\n  for (const file of files) {\n    console.log(`${file.cid} -- ${file.path} -- ${file.size}`);\n    // Not too sure how to convert a web file back to a json file here\n    console.log(JSON.stringify(file, null, 2));\n    var dao_data = \"\";\n    await fetch(`https://dweb.link/ipfs/${file.cid}`).then(response => response.json()).then(data => {\n      dao_data = data;\n    });\n  }\n}","map":{"version":3,"names":["Web3Storage","CONFIG","sha256","sha224","getAccessToken","TEMPLATE","web3storage_api_key","makeStorageClient","token","retrieveFiles","cid","client","id","res","get","console","log","status","statusText","ok","Error","files","file","path","size","JSON","stringify","dao_data","fetch","then","response","json","data"],"sources":["/Users/yuchenpeng/dao_terminal_v0/src/utils/retrieveIPFS.js"],"sourcesContent":["import { Web3Storage } from 'web3.storage'\nimport {CONFIG} from '../config.js'\nimport { sha256, sha224 } from 'js-sha256';\n\nfunction getAccessToken () {\n  return CONFIG.TEMPLATE.web3storage_api_key\n}\n\nfunction makeStorageClient () {\n  return new Web3Storage({ token: getAccessToken() })\n}\n\nexport default async function retrieveFiles (cid) {\nconst client = makeStorageClient()\nlet id = \"bafybeiei3sdsoeyqtdxpy5jnmk77yrlbtwvbxatpk23iopz5iegybbzvbi\"\nconst res = await client.get(id)\nconsole.log(`Got a response! [${res.status}] ${res.statusText}`)\nif (!res.ok) {\n    throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)\n}\n\n// unpack File objects from the response\nconst files = await res.files()\nfor (const file of files) {\n    console.log(`${file.cid} -- ${file.path} -- ${file.size}`)\n    // Not too sure how to convert a web file back to a json file here\n    console.log(JSON.stringify(file, null, 2))\n    var dao_data = \"\";\n    await fetch(`https://dweb.link/ipfs/${file.cid}`)\n      .then((response) => response.json())\n      .then(data=>{\n        dao_data = data\n      })\n\n}\n}\n\n\n\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAAQC,MAAM,QAAO,cAAc;AACnC,SAASC,MAAM,EAAEC,MAAM,QAAQ,WAAW;AAE1C,SAASC,cAAc,GAAI;EACzB,OAAOH,MAAM,CAACI,QAAQ,CAACC,mBAAmB;AAC5C;AAEA,SAASC,iBAAiB,GAAI;EAC5B,OAAO,IAAIP,WAAW,CAAC;IAAEQ,KAAK,EAAEJ,cAAc;EAAG,CAAC,CAAC;AACrD;AAEA,eAAe,eAAeK,aAAa,CAAEC,GAAG,EAAE;EAClD,MAAMC,MAAM,GAAGJ,iBAAiB,EAAE;EAClC,IAAIK,EAAE,GAAG,6DAA6D;EACtE,MAAMC,GAAG,GAAG,MAAMF,MAAM,CAACG,GAAG,CAACF,EAAE,CAAC;EAChCG,OAAO,CAACC,GAAG,CAAE,oBAAmBH,GAAG,CAACI,MAAO,KAAIJ,GAAG,CAACK,UAAW,EAAC,CAAC;EAChE,IAAI,CAACL,GAAG,CAACM,EAAE,EAAE;IACT,MAAM,IAAIC,KAAK,CAAE,iBAAgBV,GAAI,OAAMG,GAAG,CAACI,MAAO,KAAIJ,GAAG,CAACK,UAAW,EAAC,CAAC;EAC/E;;EAEA;EACA,MAAMG,KAAK,GAAG,MAAMR,GAAG,CAACQ,KAAK,EAAE;EAC/B,KAAK,MAAMC,IAAI,IAAID,KAAK,EAAE;IACtBN,OAAO,CAACC,GAAG,CAAE,GAAEM,IAAI,CAACZ,GAAI,OAAMY,IAAI,CAACC,IAAK,OAAMD,IAAI,CAACE,IAAK,EAAC,CAAC;IAC1D;IACAT,OAAO,CAACC,GAAG,CAACS,IAAI,CAACC,SAAS,CAACJ,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IAC1C,IAAIK,QAAQ,GAAG,EAAE;IACjB,MAAMC,KAAK,CAAE,0BAAyBN,IAAI,CAACZ,GAAI,EAAC,CAAC,CAC9CmB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAACG,IAAI,IAAE;MACVL,QAAQ,GAAGK,IAAI;IACjB,CAAC,CAAC;EAER;AACA"},"metadata":{},"sourceType":"module"}