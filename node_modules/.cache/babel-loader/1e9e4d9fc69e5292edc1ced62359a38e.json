{"ast":null,"code":"import { Web3Storage } from 'web3.storage';\nimport { CONFIG } from '../config.js';\nfunction getAccessToken() {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return CONFIG.TEMPLATE.web3storage_api_key;\n}\nfunction makeStorageClient() {\n  return new Web3Storage({\n    token: getAccessToken()\n  });\n}\nfunction getFiles() {\n  const fileInput = document.querySelector('input[type=\"file\"]');\n  return fileInput.files;\n}\n\n// function makeFileObjects () {\n//   // You can create File objects from a Blob of binary data\n//   // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n//   // Here we're just storing a JSON object, but you can store images,\n//   // audio, or whatever you want!\n//   const obj = { hello: 'world' }\n//   const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })\n\n//   const files = [\n//     new File(['contents-of-file-1'], 'plain-utf8.txt'),\n//     new File([blob], 'hello.json')\n//   ]\n//   return files\n// }\n\nasync function storeFiles(files) {\n  const client = makeStorageClient();\n  const cid = await client.put(files);\n  console.log('stored files with cid:', cid);\n  return cid;\n}\nasync function storeWithProgress(files) {\n  // show the root cid as soon as it's ready\n  const onRootCidReady = cid => {\n    console.log('uploading files with cid:', cid);\n  };\n\n  // when each chunk is stored, update the percentage complete and display\n  const totalSize = files.map(f => f.size).reduce((a, b) => a + b, 0);\n  let uploaded = 0;\n  const onStoredChunk = size => {\n    uploaded += size;\n    const pct = 100 * (uploaded / totalSize);\n    console.log(`Uploading... ${pct.toFixed(2)}% complete`);\n  };\n\n  // makeStorageClient returns an authorized web3.storage client instance\n  const client = makeStorageClient();\n\n  // client.put will invoke our callbacks during the upload\n  // and return the root cid when the upload completes\n  return client.put(files, {\n    onRootCidReady,\n    onStoredChunk\n  });\n}\nexport default async function retrieveFiles(cid) {\n  const client = makeStorageClient();\n  const res = await client.get(cid);\n  console.log(`Got a response! [${res.status}] ${res.statusText}`);\n  if (!res.ok) {\n    throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`);\n  }\n\n  // unpack File objects from the response\n  const files = await res.files();\n  for (const file of files) {\n    console.log(`${file.cid} -- ${file.path} -- ${file.size}`);\n    console.log(typeof file);\n    console.log(file);\n    console.log(file.text);\n  }\n}","map":{"version":3,"names":["Web3Storage","CONFIG","getAccessToken","TEMPLATE","web3storage_api_key","makeStorageClient","token","getFiles","fileInput","document","querySelector","files","storeFiles","client","cid","put","console","log","storeWithProgress","onRootCidReady","totalSize","map","f","size","reduce","a","b","uploaded","onStoredChunk","pct","toFixed","retrieveFiles","res","get","status","statusText","ok","Error","file","path","text"],"sources":["/Users/yuchenpeng/dao_terminal_v0/src/utils/retrieveIPFS.js"],"sourcesContent":["import { Web3Storage } from 'web3.storage'\nimport {CONFIG} from '../config.js'\nfunction getAccessToken () {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return CONFIG.TEMPLATE.web3storage_api_key\n}\n\nfunction makeStorageClient () {\n  return new Web3Storage({ token: getAccessToken() })\n}\n\nfunction getFiles () {\n  const fileInput = document.querySelector('input[type=\"file\"]')\n  return fileInput.files\n}\n\n// function makeFileObjects () {\n//   // You can create File objects from a Blob of binary data\n//   // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n//   // Here we're just storing a JSON object, but you can store images,\n//   // audio, or whatever you want!\n//   const obj = { hello: 'world' }\n//   const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })\n\n//   const files = [\n//     new File(['contents-of-file-1'], 'plain-utf8.txt'),\n//     new File([blob], 'hello.json')\n//   ]\n//   return files\n// }\n\nasync function storeFiles (files) {\n  const client = makeStorageClient()\n  const cid = await client.put(files)\n  console.log('stored files with cid:', cid)\n  return cid\n}\n\nasync function storeWithProgress (files) {\n  // show the root cid as soon as it's ready\n  const onRootCidReady = cid => {\n    console.log('uploading files with cid:', cid)\n  }\n\n  // when each chunk is stored, update the percentage complete and display\n  const totalSize = files.map(f => f.size).reduce((a, b) => a + b, 0)\n  let uploaded = 0\n\n  const onStoredChunk = size => {\n    uploaded += size\n    const pct = 100 * (uploaded / totalSize)\n    console.log(`Uploading... ${pct.toFixed(2)}% complete`)\n  }\n\n  // makeStorageClient returns an authorized web3.storage client instance\n  const client = makeStorageClient()\n\n  // client.put will invoke our callbacks during the upload\n  // and return the root cid when the upload completes\n  return client.put(files, { onRootCidReady, onStoredChunk })\n}\n\n\nexport default async function retrieveFiles (cid) {\nconst client = makeStorageClient()\nconst res = await client.get(cid)\nconsole.log(`Got a response! [${res.status}] ${res.statusText}`)\nif (!res.ok) {\n    throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)\n}\n\n// unpack File objects from the response\nconst files = await res.files()\nfor (const file of files) {\n    console.log(`${file.cid} -- ${file.path} -- ${file.size}`)\n    console.log(typeof file)\n    console.log(file)\n    console.log(file.text)\n\n}\n\n\n\n}\n\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAAQC,MAAM,QAAO,cAAc;AACnC,SAASC,cAAc,GAAI;EACzB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,OAAOD,MAAM,CAACE,QAAQ,CAACC,mBAAmB;AAC5C;AAEA,SAASC,iBAAiB,GAAI;EAC5B,OAAO,IAAIL,WAAW,CAAC;IAAEM,KAAK,EAAEJ,cAAc;EAAG,CAAC,CAAC;AACrD;AAEA,SAASK,QAAQ,GAAI;EACnB,MAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,oBAAoB,CAAC;EAC9D,OAAOF,SAAS,CAACG,KAAK;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeC,UAAU,CAAED,KAAK,EAAE;EAChC,MAAME,MAAM,GAAGR,iBAAiB,EAAE;EAClC,MAAMS,GAAG,GAAG,MAAMD,MAAM,CAACE,GAAG,CAACJ,KAAK,CAAC;EACnCK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEH,GAAG,CAAC;EAC1C,OAAOA,GAAG;AACZ;AAEA,eAAeI,iBAAiB,CAAEP,KAAK,EAAE;EACvC;EACA,MAAMQ,cAAc,GAAGL,GAAG,IAAI;IAC5BE,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEH,GAAG,CAAC;EAC/C,CAAC;;EAED;EACA,MAAMM,SAAS,GAAGT,KAAK,CAACU,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC;EACnE,IAAIC,QAAQ,GAAG,CAAC;EAEhB,MAAMC,aAAa,GAAGL,IAAI,IAAI;IAC5BI,QAAQ,IAAIJ,IAAI;IAChB,MAAMM,GAAG,GAAG,GAAG,IAAIF,QAAQ,GAAGP,SAAS,CAAC;IACxCJ,OAAO,CAACC,GAAG,CAAE,gBAAeY,GAAG,CAACC,OAAO,CAAC,CAAC,CAAE,YAAW,CAAC;EACzD,CAAC;;EAED;EACA,MAAMjB,MAAM,GAAGR,iBAAiB,EAAE;;EAElC;EACA;EACA,OAAOQ,MAAM,CAACE,GAAG,CAACJ,KAAK,EAAE;IAAEQ,cAAc;IAAES;EAAc,CAAC,CAAC;AAC7D;AAGA,eAAe,eAAeG,aAAa,CAAEjB,GAAG,EAAE;EAClD,MAAMD,MAAM,GAAGR,iBAAiB,EAAE;EAClC,MAAM2B,GAAG,GAAG,MAAMnB,MAAM,CAACoB,GAAG,CAACnB,GAAG,CAAC;EACjCE,OAAO,CAACC,GAAG,CAAE,oBAAmBe,GAAG,CAACE,MAAO,KAAIF,GAAG,CAACG,UAAW,EAAC,CAAC;EAChE,IAAI,CAACH,GAAG,CAACI,EAAE,EAAE;IACT,MAAM,IAAIC,KAAK,CAAE,iBAAgBvB,GAAI,OAAMkB,GAAG,CAACE,MAAO,KAAIF,GAAG,CAACG,UAAW,EAAC,CAAC;EAC/E;;EAEA;EACA,MAAMxB,KAAK,GAAG,MAAMqB,GAAG,CAACrB,KAAK,EAAE;EAC/B,KAAK,MAAM2B,IAAI,IAAI3B,KAAK,EAAE;IACtBK,OAAO,CAACC,GAAG,CAAE,GAAEqB,IAAI,CAACxB,GAAI,OAAMwB,IAAI,CAACC,IAAK,OAAMD,IAAI,CAACf,IAAK,EAAC,CAAC;IAC1DP,OAAO,CAACC,GAAG,CAAC,OAAOqB,IAAI,CAAC;IACxBtB,OAAO,CAACC,GAAG,CAACqB,IAAI,CAAC;IACjBtB,OAAO,CAACC,GAAG,CAACqB,IAAI,CAACE,IAAI,CAAC;EAE1B;AAIA"},"metadata":{},"sourceType":"module"}