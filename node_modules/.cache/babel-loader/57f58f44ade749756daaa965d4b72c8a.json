{"ast":null,"code":"import { Web3Storage } from 'web3.storage';\nimport { CONFIG } from '../config.js';\nfunction getAccessToken() {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return CONFIG.TEMPLATE.web3storage_api_key;\n}\nfunction makeStorageClient() {\n  return new Web3Storage({\n    token: getAccessToken()\n  });\n}\nconst content = {\n  \"name\": \"dao_terminal_v0\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@livepeer/webrtmp-sdk\": \"^0.2.3\",\n    \"@testing-library/jest-dom\": \"^5.16.5\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"axios\": \"^1.1.3\",\n    \"chart.js\": \"^3.9.1\",\n    \"moment\": \"^2.29.4\",\n    \"react\": \"^18.2.0\",\n    \"react-chartjs-2\": \"^4.3.1\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"^2.1.4\",\n    \"web3.storage\": \"^4.4.0\"\n  }\n};\nconst finalContent = JSON.stringify(content);\nconst file = new File([finalContent], await sha256(finalContent), {\n  type: 'text/plain'\n});\n\n// function getFiles () {\n//   const fileInput = document.querySelector('input[type=\"file\"]')\n//   return fileInput.files\n// }\n\n// function makeFileObjects () {\n//   // You can create File objects from a Blob of binary data\n//   // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n//   // Here we're just storing a JSON object, but you can store images,\n//   // audio, or whatever you want!\n//   const obj = { hello: 'world' }\n//   const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })\n\n//   const files = [\n//     new File(['contents-of-file-1'], 'plain-utf8.txt'),\n//     new File([blob], 'hello.json')\n//   ]\n//   return files\n// }\n\n// async function storeFiles (files) {\n//   const client = makeStorageClient()\n//   const cid = await client.put(files)\n//   console.log('stored files with cid:', cid)\n//   return cid\n// }\n\n// async function storeWithProgress (files) {\n//   // show the root cid as soon as it's ready\n//   const onRootCidReady = cid => {\n//     console.log('uploading files with cid:', cid)\n//   }\n\n//   // when each chunk is stored, update the percentage complete and display\n//   const totalSize = files.map(f => f.size).reduce((a, b) => a + b, 0)\n//   let uploaded = 0\n\n//   const onStoredChunk = size => {\n//     uploaded += size\n//     const pct = 100 * (uploaded / totalSize)\n//     console.log(`Uploading... ${pct.toFixed(2)}% complete`)\n//   }\n\n//   // makeStorageClient returns an authorized web3.storage client instance\n//   const client = makeStorageClient()\n\n//   // client.put will invoke our callbacks during the upload\n//   // and return the root cid when the upload completes\n//   return client.put(files, { onRootCidReady, onStoredChunk })\n// }\n\n// export default async function retrieveFiles (cid) {\n// const client = makeStorageClient()\n// const res = await client.get(cid)\n// console.log(`Got a response! [${res.status}] ${res.statusText}`)\n// if (!res.ok) {\n//     throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)\n// }\n\n// // unpack File objects from the response\n// const files = await res.files()\n// for (const file of files) {\n//     console.log(`${file.cid} -- ${file.path} -- ${file.size}`)\n//     console.log(typeof file)\n//     console.log(file)\n//     console.log(file.text)\n\n// }\n\n// }","map":{"version":3,"names":["Web3Storage","CONFIG","getAccessToken","TEMPLATE","web3storage_api_key","makeStorageClient","token","content","finalContent","JSON","stringify","file","File","sha256","type"],"sources":["/Users/yuchenpeng/dao_terminal_v0/src/utils/retrieveIPFS.js"],"sourcesContent":["import { Web3Storage } from 'web3.storage'\nimport {CONFIG} from '../config.js'\nfunction getAccessToken () {\n  // If you're just testing, you can paste in a token\n  // and uncomment the following line:\n  // return 'paste-your-token-here'\n\n  // In a real app, it's better to read an access token from an\n  // environement variable or other configuration that's kept outside of\n  // your code base. For this to work, you need to set the\n  // WEB3STORAGE_TOKEN environment variable before you run your code.\n  return CONFIG.TEMPLATE.web3storage_api_key\n}\n\nfunction makeStorageClient () {\n  return new Web3Storage({ token: getAccessToken() })\n}\nconst content = {\n  \"name\": \"dao_terminal_v0\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@livepeer/webrtmp-sdk\": \"^0.2.3\",\n    \"@testing-library/jest-dom\": \"^5.16.5\",\n    \"@testing-library/react\": \"^13.4.0\",\n    \"@testing-library/user-event\": \"^13.5.0\",\n    \"axios\": \"^1.1.3\",\n    \"chart.js\": \"^3.9.1\",\n    \"moment\": \"^2.29.4\",\n    \"react\": \"^18.2.0\",\n    \"react-chartjs-2\": \"^4.3.1\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-scripts\": \"5.0.1\",\n    \"web-vitals\": \"^2.1.4\",\n    \"web3.storage\": \"^4.4.0\"\n  }}\nconst finalContent = JSON.stringify(content);\nconst file = new File([finalContent], await sha256(finalContent), {\n      type: 'text/plain',\n    }); \n\n// function getFiles () {\n//   const fileInput = document.querySelector('input[type=\"file\"]')\n//   return fileInput.files\n// }\n\n\n\n// function makeFileObjects () {\n//   // You can create File objects from a Blob of binary data\n//   // see: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n//   // Here we're just storing a JSON object, but you can store images,\n//   // audio, or whatever you want!\n//   const obj = { hello: 'world' }\n//   const blob = new Blob([JSON.stringify(obj)], { type: 'application/json' })\n\n//   const files = [\n//     new File(['contents-of-file-1'], 'plain-utf8.txt'),\n//     new File([blob], 'hello.json')\n//   ]\n//   return files\n// }\n\n// async function storeFiles (files) {\n//   const client = makeStorageClient()\n//   const cid = await client.put(files)\n//   console.log('stored files with cid:', cid)\n//   return cid\n// }\n\n// async function storeWithProgress (files) {\n//   // show the root cid as soon as it's ready\n//   const onRootCidReady = cid => {\n//     console.log('uploading files with cid:', cid)\n//   }\n\n//   // when each chunk is stored, update the percentage complete and display\n//   const totalSize = files.map(f => f.size).reduce((a, b) => a + b, 0)\n//   let uploaded = 0\n\n//   const onStoredChunk = size => {\n//     uploaded += size\n//     const pct = 100 * (uploaded / totalSize)\n//     console.log(`Uploading... ${pct.toFixed(2)}% complete`)\n//   }\n\n//   // makeStorageClient returns an authorized web3.storage client instance\n//   const client = makeStorageClient()\n\n//   // client.put will invoke our callbacks during the upload\n//   // and return the root cid when the upload completes\n//   return client.put(files, { onRootCidReady, onStoredChunk })\n// }\n\n\n// export default async function retrieveFiles (cid) {\n// const client = makeStorageClient()\n// const res = await client.get(cid)\n// console.log(`Got a response! [${res.status}] ${res.statusText}`)\n// if (!res.ok) {\n//     throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)\n// }\n\n// // unpack File objects from the response\n// const files = await res.files()\n// for (const file of files) {\n//     console.log(`${file.cid} -- ${file.path} -- ${file.size}`)\n//     console.log(typeof file)\n//     console.log(file)\n//     console.log(file.text)\n\n// }\n\n\n\n// }\n\n\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAAQC,MAAM,QAAO,cAAc;AACnC,SAASC,cAAc,GAAI;EACzB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA,OAAOD,MAAM,CAACE,QAAQ,CAACC,mBAAmB;AAC5C;AAEA,SAASC,iBAAiB,GAAI;EAC5B,OAAO,IAAIL,WAAW,CAAC;IAAEM,KAAK,EAAEJ,cAAc;EAAG,CAAC,CAAC;AACrD;AACA,MAAMK,OAAO,GAAG;EACd,MAAM,EAAE,iBAAiB;EACzB,SAAS,EAAE,OAAO;EAClB,SAAS,EAAE,IAAI;EACf,cAAc,EAAE;IACd,uBAAuB,EAAE,QAAQ;IACjC,2BAA2B,EAAE,SAAS;IACtC,wBAAwB,EAAE,SAAS;IACnC,6BAA6B,EAAE,SAAS;IACxC,OAAO,EAAE,QAAQ;IACjB,UAAU,EAAE,QAAQ;IACpB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,iBAAiB,EAAE,QAAQ;IAC3B,WAAW,EAAE,SAAS;IACtB,eAAe,EAAE,OAAO;IACxB,YAAY,EAAE,QAAQ;IACtB,cAAc,EAAE;EAClB;AAAC,CAAC;AACJ,MAAMC,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC;AAC5C,MAAMI,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACJ,YAAY,CAAC,EAAE,MAAMK,MAAM,CAACL,YAAY,CAAC,EAAE;EAC5DM,IAAI,EAAE;AACR,CAAC,CAAC;;AAEN;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA"},"metadata":{},"sourceType":"module"}