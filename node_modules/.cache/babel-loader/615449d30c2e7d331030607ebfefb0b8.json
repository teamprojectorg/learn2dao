{"ast":null,"code":"import moment from 'moment';\nimport axios from 'axios';\nexport default async function getTokenHolders(key, chainId, address, startDate, endDate) {\n  // Return the spot price of the DAO token from startDate to endDate\n  // input: \n  // key: Covalent API key\n  // chainId: the Chain the DAO is hosted on (Ethereum, Solana, etc..)\n  // address: the smart contract address of the DAO \n  // startDate\n  // endDate\n\n  // output:\n  // totalTokenHolders: Array of date to tokenholders in past 30 days\n  // {'2022-10-01':10003, '2022-10-02':100023}\n\n  const days_interval = 30;\n  let from = moment().subtract(days_interval, 'days').format('YYYY-MM-DD');\n  const currentDay = moment().format('YYYY-MM-DD');\n\n  // Steps to get tokenholders in the past 7 days \n  // 1. Get block heights  start_date and end_date 2022-10-01 and 2022-10-31\n  // 2. Take the tokenholders of the start_date block height and of the end_date blockholder\n  // 3 . plot the data\n  let api_call_blockheights = `https://api.covalenthq.com/v1/${chainId}/block_v2/${startDate}/${endDate}/?quote-currency=USD&format=JSON&key=ckey_af1d8bda66e340bd835f1855487`;\n  try {\n    const resp = await axios.get(api_call_blockheights, {\n      auth: {\n        username: key\n      }\n    });\n    console.log(resp);\n    // Organize response data to insert into graph\n    //let date_to_blockheight = resp.data.data.items.map(i => ({x:i., y:i.floor_price_quote_7d})).reverse()\n\n    let date_to_blockheight = resp.data.data.items.map(i => ({\n      x: i.signed_at,\n      y: i.height\n    }));\n    let start_date_block_height = date_to_blockheight[0];\n    let end_date_block_height = date_to_blockheight[-1];\n    var dates_to_tokenHolders = new Array();\n    dates_to_tokenHolders['2022-10-01'] = 100;\n    dates_to_tokenHolders['2022-10-02'] = 200;\n    dates_to_tokenHolders['2022-10-03'] = 300;\n    dates_to_tokenHolders['2022-10-04'] = 400;\n    return dates_to_tokenHolders;\n  } catch (error) {\n    console.log(\"fail to fetch token holders\");\n  }\n}","map":{"version":3,"names":["moment","axios","getTokenHolders","key","chainId","address","startDate","endDate","days_interval","from","subtract","format","currentDay","api_call_blockheights","resp","get","auth","username","console","log","date_to_blockheight","data","items","map","i","x","signed_at","y","height","start_date_block_height","end_date_block_height","dates_to_tokenHolders","Array","error"],"sources":["/Users/yuchenpeng/dao_terminal_v0/src/api/v1/getTokenHolders.js"],"sourcesContent":["\nimport moment from 'moment';\nimport axios from 'axios';\n\n export default async function getTokenHolders(key, chainId, address, startDate, endDate ){\n\n   // Return the spot price of the DAO token from startDate to endDate\n    // input: \n    // key: Covalent API key\n    // chainId: the Chain the DAO is hosted on (Ethereum, Solana, etc..)\n    // address: the smart contract address of the DAO \n    // startDate\n    // endDate\n  \n    // output:\n    // totalTokenHolders: Array of date to tokenholders in past 30 days\n    // {'2022-10-01':10003, '2022-10-02':100023}\n   \n    const days_interval = 30; \n    let from = moment().subtract(days_interval, 'days').format('YYYY-MM-DD')\n \n    const currentDay =moment().format('YYYY-MM-DD')\n\n    // Steps to get tokenholders in the past 7 days \n    // 1. Get block heights  start_date and end_date 2022-10-01 and 2022-10-31\n    // 2. Take the tokenholders of the start_date block height and of the end_date blockholder\n    // 3 . plot the data\n    let api_call_blockheights = `https://api.covalenthq.com/v1/${chainId}/block_v2/${startDate}/${endDate}/?quote-currency=USD&format=JSON&key=ckey_af1d8bda66e340bd835f1855487`\n\n\n    try{\n     const resp = await axios.get(api_call_blockheights, {auth: {username: key}})\n     console.log(resp)\n     // Organize response data to insert into graph\n     //let date_to_blockheight = resp.data.data.items.map(i => ({x:i., y:i.floor_price_quote_7d})).reverse()\n    \n     let date_to_blockheight = resp.data.data.items.map(i => ({x:i.signed_at, y:i.height}))\n     let start_date_block_height = date_to_blockheight[0]\n     let end_date_block_height = date_to_blockheight[-1]\n\n     var dates_to_tokenHolders = new Array();\n     dates_to_tokenHolders['2022-10-01'] = 100;\n     dates_to_tokenHolders['2022-10-02'] = 200;\n     dates_to_tokenHolders['2022-10-03'] = 300;\n     dates_to_tokenHolders['2022-10-04'] = 400;\n     return dates_to_tokenHolders;\n\n    }catch(error){\n       console.log(\"fail to fetch token holders\")\n   }\n  }\n\n\n\n"],"mappings":"AACA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,KAAK,MAAM,OAAO;AAExB,eAAe,eAAeC,eAAe,CAACC,GAAG,EAAEC,OAAO,EAAEC,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAE;EAEvF;EACC;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAMC,aAAa,GAAG,EAAE;EACxB,IAAIC,IAAI,GAAGT,MAAM,EAAE,CAACU,QAAQ,CAACF,aAAa,EAAE,MAAM,CAAC,CAACG,MAAM,CAAC,YAAY,CAAC;EAExE,MAAMC,UAAU,GAAEZ,MAAM,EAAE,CAACW,MAAM,CAAC,YAAY,CAAC;;EAE/C;EACA;EACA;EACA;EACA,IAAIE,qBAAqB,GAAI,iCAAgCT,OAAQ,aAAYE,SAAU,IAAGC,OAAQ,uEAAsE;EAG5K,IAAG;IACF,MAAMO,IAAI,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACF,qBAAqB,EAAE;MAACG,IAAI,EAAE;QAACC,QAAQ,EAAEd;MAAG;IAAC,CAAC,CAAC;IAC5Ee,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACjB;IACA;;IAEA,IAAIM,mBAAmB,GAAGN,IAAI,CAACO,IAAI,CAACA,IAAI,CAACC,KAAK,CAACC,GAAG,CAACC,CAAC,KAAK;MAACC,CAAC,EAACD,CAAC,CAACE,SAAS;MAAEC,CAAC,EAACH,CAAC,CAACI;IAAM,CAAC,CAAC,CAAC;IACtF,IAAIC,uBAAuB,GAAGT,mBAAmB,CAAC,CAAC,CAAC;IACpD,IAAIU,qBAAqB,GAAGV,mBAAmB,CAAC,CAAC,CAAC,CAAC;IAEnD,IAAIW,qBAAqB,GAAG,IAAIC,KAAK,EAAE;IACvCD,qBAAqB,CAAC,YAAY,CAAC,GAAG,GAAG;IACzCA,qBAAqB,CAAC,YAAY,CAAC,GAAG,GAAG;IACzCA,qBAAqB,CAAC,YAAY,CAAC,GAAG,GAAG;IACzCA,qBAAqB,CAAC,YAAY,CAAC,GAAG,GAAG;IACzC,OAAOA,qBAAqB;EAE7B,CAAC,QAAME,KAAK,EAAC;IACVf,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;EAC9C;AACD"},"metadata":{},"sourceType":"module"}